// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketTravel.Data;

#nullable disable

namespace TicketTravel.Migrations
{
    [DbContext(typeof(TicketTravelContext))]
    [Migration("20230623140428_init2")]
    partial class init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BookingTravel.Models.BookingTicket", b =>
                {
                    b.Property<int>("IdBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("IdBooking");

                    b.HasIndex("TicketId");

                    b.ToTable("BookingTickets");
                });

            modelBuilder.Entity("BookingTravel.Models.HistoryBooking", b =>
                {
                    b.Property<int>("IdHistoryBooking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IdHistoryBooking");

                    b.HasIndex("UserId");

                    b.ToTable("HistoryBookings");
                });

            modelBuilder.Entity("BookingTravel.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("HistoryBookingIdHistoryBooking")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Schedule")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<int>("TransportationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HistoryBookingIdHistoryBooking");

                    b.HasIndex("TransportationId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BookingTravel.Models.Transportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameTransportation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TransportationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("seat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransportationTypeId");

                    b.ToTable("Transportations");
                });

            modelBuilder.Entity("BookingTravel.Models.TransportationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TransportationTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TransportationTypes");
                });

            modelBuilder.Entity("TicketTravel.Models.Account", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Username");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("TicketTravel.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("BookingTicketIdBooking")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BookingTicketIdBooking");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookingTravel.Models.BookingTicket", b =>
                {
                    b.HasOne("BookingTravel.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BookingTravel.Models.HistoryBooking", b =>
                {
                    b.HasOne("TicketTravel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingTravel.Models.Ticket", b =>
                {
                    b.HasOne("BookingTravel.Models.HistoryBooking", null)
                        .WithMany("Tickets")
                        .HasForeignKey("HistoryBookingIdHistoryBooking");

                    b.HasOne("BookingTravel.Models.Transportation", "Transportation")
                        .WithMany()
                        .HasForeignKey("TransportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transportation");
                });

            modelBuilder.Entity("BookingTravel.Models.Transportation", b =>
                {
                    b.HasOne("BookingTravel.Models.TransportationType", "TransportationType")
                        .WithMany()
                        .HasForeignKey("TransportationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransportationType");
                });

            modelBuilder.Entity("TicketTravel.Models.Account", b =>
                {
                    b.HasOne("TicketTravel.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketTravel.Models.User", b =>
                {
                    b.HasOne("BookingTravel.Models.BookingTicket", null)
                        .WithMany("UserBooking")
                        .HasForeignKey("BookingTicketIdBooking");
                });

            modelBuilder.Entity("BookingTravel.Models.BookingTicket", b =>
                {
                    b.Navigation("UserBooking");
                });

            modelBuilder.Entity("BookingTravel.Models.HistoryBooking", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
